#include <iostream>
using namespace std;

// Struktur Node untuk linked list
struct Node {
    string data; // Data yang disimpan dalam node
    Node* next;  // Pointer ke node berikutnya
};

Node* front = nullptr; // Pointer ke elemen depan antrian
Node* back = nullptr;  // Pointer ke elemen belakang antrian

// Fungsi untuk memeriksa apakah antrian penuh
bool isFull() {
    return false; // Pada linked list, antrian tidak pernah penuh kecuali memori habis
}

// Fungsi untuk memeriksa apakah antrian kosong
bool isEmpty() {
    return front == nullptr; // Antrian kosong jika front adalah nullptr
}

// Fungsi untuk menambahkan elemen ke antrian
void enqueueAntrian(string data) {
    Node* newNode = new Node(); // Membuat node baru
    newNode->data = data;       // Menetapkan data ke node baru
    newNode->next = nullptr;    // Node baru akan menjadi node terakhir, jadi next adalah nullptr
    if (isEmpty()) {            // Jika antrian kosong
        front = back = newNode; // Node baru menjadi front dan back
    } else {
        back->next = newNode;   // Menghubungkan node terakhir saat ini ke node baru
        back = newNode;         // Memperbarui back ke node baru
    }
}

// Fungsi untuk menghapus elemen dari antrian
void dequeueAntrian() {
    if (isEmpty()) {
        cout << "Antrian kosong" << endl;
    } else {
        Node* temp = front;    // Menyimpan node depan sementara
        front = front->next;   // Memperbarui front ke node berikutnya
        if (front == nullptr) { // Jika antrian menjadi kosong setelah dequeue
            back = nullptr;   // Back juga harus nullptr
        }
        delete temp;          // Menghapus node depan lama
    }
}

// Fungsi untuk menghitung jumlah elemen dalam antrian
int countQueue() {
    int count = 0;
    Node* current = front;     // Mulai dari front
    while (current != nullptr) { // Iterasi melalui semua node
        count++;                // Tambah hitungan
        current = current->next; // Pindah ke node berikutnya
    }
    return count;              // Mengembalikan jumlah node
}

// Fungsi untuk mengosongkan antrian
void clearQueue() {
    while (!isEmpty()) {       // Selama antrian tidak kosong
        dequeueAntrian();      // Hapus elemen depan
    }
}

// Fungsi untuk melihat semua elemen dalam antrian
void viewQueue() {
    cout << "Data antrian teller:" << endl;
    Node* current = front;     // Mulai dari front
    int position = 1;
    while (current != nullptr) { // Iterasi melalui semua node
        cout << position << ". " << current->data << endl;
        current = current->next; // Pindah ke node berikutnya
        position++;
    }
    if (isEmpty()) {           // Jika antrian kosong
        for (int i = position; i <= 5; i++) { // Tampilkan kosong sampai posisi kelima
            cout << i << ". (kosong)" << endl;
        }
    }
}

int main() {
    enqueueAntrian("Wahyu");    // Menambahkan "Wahyu" ke antrian
    enqueueAntrian("Hasanah");    // Menambahkan "Hasanah" ke antrian
    viewQueue();               // Melihat antrian
    cout << "Jumlah antrian = " << countQueue() << endl; // Menampilkan jumlah antrian
    dequeueAntrian();          // Menghapus satu elemen dari antrian
    viewQueue();               // Melihat antrian lagi
    cout << "Jumlah antrian = " << countQueue() << endl; // Menampilkan jumlah antrian
    clearQueue();              // Mengosongkan antrian
    viewQueue();               // Melihat antrian setelah dikosongkan
    cout << "Jumlah antrian = " << countQueue() << endl; // Menampilkan jumlah antrian
    return 0;
}
