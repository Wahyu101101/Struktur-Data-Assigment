#include <iostream>
using namespace std;

// PROGRAM BINARY TREE
// Deklarasi Pohon
struct Pohon {
    char data;
    Pohon *left, *right, *parent; // pointer untuk left child, right child, dan parent
};

// pointer global
Pohon *root;

// Inisialisasi
void init() {
    root = NULL; // inisialisasi root menjadi NULL
}

// Fungsi untuk mengecek apakah tree kosong
bool isEmpty() {
    return root == NULL; // mengembalikan true jika root NULL
}

// Fungsi untuk membuat node baru
Pohon *newPohon(char data) {
    Pohon *node = new Pohon(); // alokasi memori untuk node baru
    node->data = data; // mengisi data pada node
    node->left = NULL; // inisialisasi left child ke NULL
    node->right = NULL; // inisialisasi right child ke NULL
    node->parent = NULL; // inisialisasi parent ke NULL
    return node;
}

// Fungsi untuk membuat root node
void buatNode(char data) {
    if (isEmpty()) {
        root = newPohon(data); // membuat root node jika tree kosong
        cout << "\nNode " << data << " berhasil dibuat menjadi root." << endl;
    } else {
        cout << "\nPohon sudah dibuat" << endl; // jika root sudah ada
    }
}

// Fungsi untuk menambahkan node ke left child
Pohon *insertLeft(char data, Pohon *node) {
    if (isEmpty()) {
        cout << "\nBuat tree terlebih dahulu!" << endl; // pesan jika tree belum dibuat
        return NULL;
    } else {
        if (node->left != NULL) {
            cout << "\nNode " << node->data << " sudah ada child kiri!" << endl; // pesan jika left child sudah ada
            return NULL;
        } else {
            Pohon *baru = newPohon(data); // membuat node baru
            baru->parent = node; // mengatur parent node baru
            node->left = baru; // mengatur left child pada node
            cout << "\nNode " << data << " berhasil ditambahkan ke child kiri " << node->data << endl;
            return baru;
        }
    }
}

// Fungsi untuk menambahkan node ke right child
Pohon *insertRight(char data, Pohon *node) {
    if (isEmpty()) {
        cout << "\nBuat tree terlebih dahulu!" << endl; // pesan jika tree belum dibuat
        return NULL;
    } else {
        if (node->right != NULL) {
            cout << "\nNode " << node->data << " sudah ada child kanan!" << endl; // pesan jika right child sudah ada
            return NULL;
        } else {
            Pohon *baru = newPohon(data); // membuat node baru
            baru->parent = node; // mengatur parent node baru
            node->right = baru; // mengatur right child pada node
            cout << "\nNode " << data << " berhasil ditambahkan ke child kanan " << node->data << endl;
            return baru;
        }
    }
}

// Fungsi untuk mengupdate data pada node
void update(char data, Pohon *node) {
    if (isEmpty()) {
        cout << "\nBuat tree terlebih dahulu!" << endl; // pesan jika tree belum dibuat
    } else {
        if (!node)
            cout << "\nNode yang ingin diganti tidak ada!!" << endl; // pesan jika node tidak ditemukan
        else {
            char temp = node->data; // menyimpan data lama
            node->data = data; // mengganti data dengan yang baru
            cout << "\nNode " << temp << " berhasil diubah menjadi " << data << endl;
        }
    }
}

// Fungsi untuk mengambil data dari node
void retrieve(Pohon *node) {
    if (isEmpty()) {
        cout << "\nBuat tree terlebih dahulu!" << endl; // pesan jika tree belum dibuat
    } else {
        if (!node)
            cout << "\nNode yang ditunjuk tidak ada!" << endl; // pesan jika node tidak ditemukan
        else {
            cout << "\nData node : " << node->data << endl; // menampilkan data node
        }
    }
}

// Fungsi untuk menemukan data pada node dan menampilkan informasi terkait
void find(Pohon *node) {
    if (isEmpty()) {
        cout << "\nBuat tree terlebih dahulu!" << endl; // pesan jika tree belum dibuat
    } else {
        if (!node)
            cout << "\nNode yang ditunjuk tidak ada!" << endl; // pesan jika node tidak ditemukan
        else {
            cout << "\nData Node : " << node->data << endl;
            cout << "Root : " << root->data << endl; // menampilkan data root
            if (!node->parent)
                cout << "Parent : (tidak punya parent)" << endl; // pesan jika tidak punya parent
            else
                cout << "Parent : " << node->parent->data << endl; // menampilkan data parent
            if (node->parent != NULL && node->parent->left != node && node->parent->right == node)
                cout << "Sibling : " << node->parent->left->data << endl; // menampilkan data sibling kiri
            else if (node->parent != NULL && node->parent->right != node && node->parent->left == node)
                cout << "Sibling : " << node->parent->right->data << endl; // menampilkan data sibling kanan
            else
                cout << "Sibling : (tidak punya sibling)" << endl; // pesan jika tidak punya sibling
            if (!node->left)
                cout << "Child Kiri : (tidak punya Child kiri)" << endl; // pesan jika tidak punya child kiri
            else
                cout << "Child Kiri : " << node->left->data << endl; // menampilkan data child kiri
            if (!node->right)
                cout << "Child Kanan : (tidak punya Child kanan)" << endl; // pesan jika tidak punya child kanan
            else
                cout << "Child Kanan : " << node->right->data << endl; // menampilkan data child kanan
        }
    }
}

// Fungsi penelusuran (Traversal)
// preOrder
void preOrder(Pohon *node) {
    if (isEmpty())
        cout << "\nBuat tree terlebih dahulu!" << endl; // pesan jika tree belum dibuat
    else {
        if (node != NULL) {
            cout << " " << node->data << ", "; // menampilkan data node
            preOrder(node->left); // rekursif ke left child
            preOrder(node->right); // rekursif ke right child
        }
    }
}

// inOrder
void inOrder(Pohon *node) {
    if (isEmpty())
        cout << "\nBuat tree terlebih dahulu!" << endl; // pesan jika tree belum dibuat
    else {
        if (node != NULL) {
            inOrder(node->left); // rekursif ke left child
            cout << " " << node->data << ", "; // menampilkan data node
            inOrder(node->right); // rekursif ke right child
        }
    }
}

// postOrder
void postOrder(Pohon *node) {
    if (isEmpty())
        cout << "\nBuat tree terlebih dahulu!" << endl; // pesan jika tree belum dibuat
    else {
        if (node != NULL) {
            postOrder(node->left); // rekursif ke left child
            postOrder(node->right); // rekursif ke right child
            cout << " " << node->data << ", "; // menampilkan data node
        }
    }
}

// Fungsi untuk menghapus node tree
void deleteTree(Pohon *node) {
    if (isEmpty())
        cout << "\nBuat tree terlebih dahulu!" << endl; // pesan jika tree belum dibuat
    else {
        if (node != NULL) {
            if (node != root) {
                if (node->parent->left == node)
                    node->parent->left = NULL; // menghapus link ke left child
                else if (node->parent->right == node)
                    node->parent->right = NULL; // menghapus link ke right child
            }
            deleteTree(node->left); // rekursif ke left child
            deleteTree(node->right); // rekursif ke right child
            if (node == root) {
                delete root; // menghapus root
                root = NULL;
            } else {
                delete node; // menghapus node
            }
        }
    }
}

// Fungsi untuk menghapus subtree
void deleteSub(Pohon *node) {
    if (isEmpty())
        cout << "\nBuat tree terlebih dahulu!" << endl; // pesan jika tree belum dibuat
    else {
        deleteTree(node->left); // menghapus subtree left child
        deleteTree(node->right); // menghapus subtree right child
        cout << "\nNode subtree " << node->data << " berhasil dihapus." << endl;
    }
}

// Fungsi untuk menghapus seluruh tree
void clear() {
    if (isEmpty())
        cout << "\nBuat tree terlebih dahulu!!" << endl; // pesan jika tree belum dibuat
    else {
        deleteTree(root); // menghapus seluruh tree
        cout << "\nPohon berhasil dihapus." << endl;
    }
}

// Fungsi untuk cek ukuran tree
int size(Pohon *node) {
    if (isEmpty()) {
        cout << "\nBuat tree terlebih dahulu!!" << endl; // pesan jika tree belum dibuat
        return 0;
    } else {
        if (!node) {
            return 0; // jika node NULL, return 0
        } else {
            return 1 + size(node->left) + size(node->right); // menghitung ukuran tree
        }
    }
}

// Fungsi untuk cek tinggi (height) tree
int height(Pohon *node) {
    if (isEmpty()) {
        cout << "\nBuat tree terlebih dahulu!" << endl; // pesan jika tree belum dibuat
        return 0;
    } else {
        if (!node) {
            return 0; // jika node NULL, return 0
        } else {
            int heightKiri = height(node->left); // menghitung tinggi left child
            int heightKanan = height(node->right); // menghitung tinggi right child
            if (heightKiri >= heightKanan) {
                return heightKiri + 1; // mengembalikan tinggi maksimum
            } else {
                return heightKanan + 1; // mengembalikan tinggi maksimum
            }
        }
    }
}

// Fungsi untuk menampilkan karakteristik tree
void characteristic() {
    int s = size(root); // menghitung ukuran tree
    int h = height(root); // menghitung tinggi tree
    cout << "\nSize Tree : " << s << endl;
    cout << "Height Tree : " << h << endl;
    if (h != 0)
        cout << "Average Node of Tree : " << s / h << endl; // menghitung rata-rata node per level
    else
        cout << "Average Node of Tree : 0" << endl;
}

int main() {
    init(); // inisialisasi tree
    buatNode('A'); // membuat root node 'A'
    
    // Menambahkan node ke tree
    Pohon *nodeB, *nodeC, *nodeD, *nodeE, *nodeF, *nodeG, *nodeH, *nodeI, *nodeJ;
    nodeB = insertLeft('B', root);
    nodeC = insertRight('C', root);
    nodeD = insertLeft('D', nodeB);
    nodeE = insertRight('E', nodeB);
    nodeF = insertLeft('F', nodeC);
    nodeG = insertLeft('G', nodeE);
    nodeH = insertRight('H', nodeE);
    nodeI = insertLeft('I', nodeG);
    nodeJ = insertRight('J', nodeG);
    
    update('Z', nodeC); // mengubah data node 'C' menjadi 'Z'
    update('C', nodeC); // mengubah data node 'Z' kembali menjadi 'C'
    
    retrieve(nodeC); // mengambil data dari node 'C'
    find(nodeC); // menemukan data pada node 'C' dan menampilkan informasi terkait
    
    // Menampilkan traversal tree
    cout << "\nPreOrder :" << endl;
    preOrder(root);
    cout << "\n" << endl;
    
    cout << "InOrder :" << endl;
    inOrder(root);
    cout << "\n" << endl;
    
    cout << "PostOrder :" << endl;
    postOrder(root);
    cout << "\n" << endl;
    
    characteristic(); // menampilkan karakteristik tree
    
    deleteSub(nodeE); // menghapus subtree dari node 'E'
    
    cout << "\nPreOrder :" << endl;
    preOrder(root);
    cout << "\n" << endl;
    
    characteristic(); // menampilkan karakteristik tree setelah penghapusan subtree
    
    return 0;
}
